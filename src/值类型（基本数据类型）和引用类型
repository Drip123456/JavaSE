    一、定义
    引用类型表示你操作的数据是同一个，也就是说当你传一个参数给另一个方法时，你在另一个方法中改变这个变量的值，那么调用这个方法是传入的变量的值也将改变。

    值类型表示复制一个当前变量传给方法，当你在这个方法中改变这个变量的值时，最初生命的变量的值不会变。

    值类型

    也就是基本数据类型 基本数据类型常被称为四类八种。

    四类八种：

    整型（4种）：byte(1 byte)、short(2 byte)、int(4 byte)、long(8 byte)

    浮点型（2种）：float(4 byte)、double(8 byte)

    字符型（1种）：char(2 byte)

    逻辑型（1种）：boolean

    引用类型

    除了八种基本数据类型外，其他所有的类型都称为引用类型（数组、类、接口、字符串等）

    在弄清楚值类型与引用类型之后，最后一点就是值传递与引用传递，这才是关键

    值传递

    基本数据类型赋值都属于值传递,值传递传递的是实实在在的变量值,是传递原参数的拷贝,值传递后，实参传递给形参的值，形参发生改变而不影响实参。

    引用传递

    引用类型之间赋值属于引用传递。引用传递传递的是对象的引用地址,也就是它的本身(自己最通俗的理解)。引用传递：传的是地址，就是将实参的地址传递给形参，形参改变了，实参当然被改变了，因为他们指向相同的地址。

    引用和我们的指针差不多,但是它不又不需要我们去具体的操作。

    二、区别


    三、内存分配
    值类型

    值类型（value type）的数据存放在栈内的一个变量中。即是在栈中分配内存空间，直接存储所包含的值，其值就代表数据本身。

    但是也有特殊情况，如果某个类的实例有个值类型的字段，那么实际上该字段会和类实例保存在同一个地方，即堆中。不过引用类型的对象总是存储在堆中；如果一个结构的字段是引用类型，那么只有引用本身是和结构实例存储在一起的（在栈或堆上，视情况而定）。

    值类型的数据具有较快的存取速度。

    引用类型

    引用类型（reference type）的数据并不驻留在栈中，而是存储于堆中。即是在堆中分配内存空间，存储所包含的值，而栈中存储的是指向该值的地址。当访问一个具有引用类型的数据时，需要到栈中检查变量的内容，该变量引用堆中的一个实际数据。引用类型的数据比值类型的数据具有更大的存储规模和较低的访问速度。

    注：

    栈(stack)是一种后进先出的数据结构。在内存中，变量会被分配在栈上来进行操作。堆(heap)是用于为类型实例(对象)分配空间的内存区域，在堆上创建一个对象，会将对象的地址传给栈上的变量(反过来叫变量指向此对象，或者变量引用此对象)。

    值类型总是分配在它声明的地方：作为字段时，跟随其所属的变量（实例）存储；作为局部变量时，存储在栈上。

    值类型在内存管理方面具有更好的效率，并且不支持多态，适合用做存储数据的载体；

    引用类型支持多态，适合用于定义 应用程序的行为。

    四、回收机制
    当一个堆内存中的对象没有被栈内存中表示地址的值“引用”时，这个对象就被称为垃圾对象，它无法被使用但却占据着内存中的区域，好比这样：

    String s = new String("person");
    s = new String("man");

    s本来是指向堆内存中值为person的对象的，但是s突然讨厌person了，它指向了堆内存中的man对象了，person就像一个孤儿一样被s遗弃了，但是person比孤儿还要惨，因为没有什么能找的到它，除了位高权重的‘垃圾回收器’，不过被当官的找到往往没什么好事，尤其是这个‘垃圾回收器’，它会豪不留情把‘垃圾’们清理走，并且无情的销毁，以便释放内存。

    Java中有垃圾回收机制，栈内存中的变量随着方法的结束内存自然销毁了，而用引用类型的时候，当方法结束的时候，这个对象可能被另一个引用类型所应用，不会销毁，只有当一个对象没有任何引用变量引用的时候，垃圾回收机制才会回收。

    五、为什么Java中数据的存放有堆和栈之分？
    答：当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成功通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁。只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在合适的时候回收它。

    六、装箱与拆箱
    装箱：

    装箱就是值类型到引用类型的转化过程。将一个值类型变量装箱成一个引用类型变量，首先会在托管堆上为新的引用类型变量分配内存空间，然后将值类型变量拷贝到托管堆上新分配的对象内存中，最后返回新分配的对象内存地址。

    拆箱：

    装箱操作是可逆的，所以还有拆箱操作。拆箱操作获取只想对象中包含值类型部分的指针，然后由程序员手动将其对应的值拷贝给值类型变量。
